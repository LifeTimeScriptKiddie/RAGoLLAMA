version: "3.9"

# Cloud deployment configuration for AWS, GCP, Azure, etc.
# This config assumes you have external load balancer and SSL termination

services:
  ollama:
    image: ollama/ollama:latest
    container_name: financial_advisor_ollama
    restart: unless-stopped
    # Note: Don't expose ports directly in cloud - use load balancer
    volumes:
      - shared_models:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        reservations:
          memory: 4G
          cpus: "2"
        limits:
          memory: 8G
          cpus: "4"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ollama.rule=Host(`api.yourdomain.com`) && PathPrefix(`/ollama/`)"
      - "traefik.http.services.ollama.loadbalancer.server.port=11434"

  open-webui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: financial_advisor_webui
    restart: unless-stopped
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_AUTH=True
      - WEBUI_NAME=Financial Advisor Suite
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - DEFAULT_USER_ROLE=pending
      - ENABLE_SIGNUP=False  # Disable public signup in production
      - WEBUI_URL=${WEBUI_URL}
    volumes:
      - openwebui_data:/app/backend/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        reservations:
          memory: 512M
          cpus: "0.5"
        limits:
          memory: 2G
          cpus: "2"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webui.rule=Host(`yourdomain.com`)"
      - "traefik.http.services.webui.loadbalancer.server.port=8080"
      - "traefik.http.routers.webui.tls=true"
      - "traefik.http.routers.webui.tls.certresolver=letsencrypt"

  financial_advisor:
    build:
      context: .
      dockerfile: ./financial_advisor/Dockerfile
    container_name: financial_advisor_app
    restart: unless-stopped
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - shared_models:/app/data
      - document_storage:/app/docs:ro
      - app_data:/app/data_local
    environment:
      - PYTHONPATH=/app
      - OLLAMA_BASE_URL=http://ollama:11434
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        reservations:
          memory: 1G
          cpus: "1"
        limits:
          memory: 4G
          cpus: "2"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.streamlit.rule=Host(`app.yourdomain.com`)"
      - "traefik.http.services.streamlit.loadbalancer.server.port=8501"
      - "traefik.http.routers.streamlit.tls=true"
      - "traefik.http.routers.streamlit.tls.certresolver=letsencrypt"
      
      # Knowledge Base API
      - "traefik.http.routers.api.rule=Host(`api.yourdomain.com`) && PathPrefix(`/knowledge/`)"
      - "traefik.http.services.api.loadbalancer.server.port=8502"
      - "traefik.http.routers.api.tls=true"

  # Optional: Redis for session management and caching
  redis:
    image: redis:alpine
    container_name: financial_advisor_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 512M
    profiles:
      - cache

  # Optional: PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    container_name: financial_advisor_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 1G
    profiles:
      - database

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: financial_advisor_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: financial_advisor_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`monitoring.yourdomain.com`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    profiles:
      - monitoring

volumes:
  shared_models:
    driver: local
  openwebui_data:
    driver: local
  document_storage:
    driver: local
  app_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: financial_advisor_network
    driver: bridge